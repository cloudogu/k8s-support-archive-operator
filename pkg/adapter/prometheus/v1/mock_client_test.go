// Code generated by mockery v2.53.5. DO NOT EDIT.

package v1

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"

	url "net/url"
)

// mockClient is an autogenerated mock type for the client type
type mockClient struct {
	mock.Mock
}

type mockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *mockClient) EXPECT() *mockClient_Expecter {
	return &mockClient_Expecter{mock: &_m.Mock}
}

// Do provides a mock function with given fields: _a0, _a1
func (_m *mockClient) Do(_a0 context.Context, _a1 *http.Request) (*http.Response, []byte, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Do")
	}

	var r0 *http.Response
	var r1 []byte
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *http.Request) (*http.Response, []byte, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *http.Request) *http.Response); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *http.Request) []byte); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *http.Request) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// mockClient_Do_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Do'
type mockClient_Do_Call struct {
	*mock.Call
}

// Do is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *http.Request
func (_e *mockClient_Expecter) Do(_a0 interface{}, _a1 interface{}) *mockClient_Do_Call {
	return &mockClient_Do_Call{Call: _e.mock.On("Do", _a0, _a1)}
}

func (_c *mockClient_Do_Call) Run(run func(_a0 context.Context, _a1 *http.Request)) *mockClient_Do_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*http.Request))
	})
	return _c
}

func (_c *mockClient_Do_Call) Return(_a0 *http.Response, _a1 []byte, _a2 error) *mockClient_Do_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *mockClient_Do_Call) RunAndReturn(run func(context.Context, *http.Request) (*http.Response, []byte, error)) *mockClient_Do_Call {
	_c.Call.Return(run)
	return _c
}

// URL provides a mock function with given fields: ep, args
func (_m *mockClient) URL(ep string, args map[string]string) *url.URL {
	ret := _m.Called(ep, args)

	if len(ret) == 0 {
		panic("no return value specified for URL")
	}

	var r0 *url.URL
	if rf, ok := ret.Get(0).(func(string, map[string]string) *url.URL); ok {
		r0 = rf(ep, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*url.URL)
		}
	}

	return r0
}

// mockClient_URL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'URL'
type mockClient_URL_Call struct {
	*mock.Call
}

// URL is a helper method to define mock.On call
//   - ep string
//   - args map[string]string
func (_e *mockClient_Expecter) URL(ep interface{}, args interface{}) *mockClient_URL_Call {
	return &mockClient_URL_Call{Call: _e.mock.On("URL", ep, args)}
}

func (_c *mockClient_URL_Call) Run(run func(ep string, args map[string]string)) *mockClient_URL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(map[string]string))
	})
	return _c
}

func (_c *mockClient_URL_Call) Return(_a0 *url.URL) *mockClient_URL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockClient_URL_Call) RunAndReturn(run func(string, map[string]string) *url.URL) *mockClient_URL_Call {
	_c.Call.Return(run)
	return _c
}

// newMockClient creates a new instance of mockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockClient {
	mock := &mockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
