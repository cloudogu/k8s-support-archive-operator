// Code generated by mockery v2.53.5. DO NOT EDIT.

package kubernetes

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"

	v1 "github.com/cloudogu/k8s-support-archive-lib/api/v1"
)

// mockCreateArchiveHandler is an autogenerated mock type for the createArchiveHandler type
type mockCreateArchiveHandler struct {
	mock.Mock
}

type mockCreateArchiveHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *mockCreateArchiveHandler) EXPECT() *mockCreateArchiveHandler_Expecter {
	return &mockCreateArchiveHandler_Expecter{mock: &_m.Mock}
}

// HandleArchiveRequest provides a mock function with given fields: ctx, cr
func (_m *mockCreateArchiveHandler) HandleArchiveRequest(ctx context.Context, cr *v1.SupportArchive) (time.Duration, error) {
	ret := _m.Called(ctx, cr)

	if len(ret) == 0 {
		panic("no return value specified for HandleArchiveRequest")
	}

	var r0 time.Duration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.SupportArchive) (time.Duration, error)); ok {
		return rf(ctx, cr)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.SupportArchive) time.Duration); ok {
		r0 = rf(ctx, cr)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.SupportArchive) error); ok {
		r1 = rf(ctx, cr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockCreateArchiveHandler_HandleArchiveRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleArchiveRequest'
type mockCreateArchiveHandler_HandleArchiveRequest_Call struct {
	*mock.Call
}

// HandleArchiveRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - cr *v1.SupportArchive
func (_e *mockCreateArchiveHandler_Expecter) HandleArchiveRequest(ctx interface{}, cr interface{}) *mockCreateArchiveHandler_HandleArchiveRequest_Call {
	return &mockCreateArchiveHandler_HandleArchiveRequest_Call{Call: _e.mock.On("HandleArchiveRequest", ctx, cr)}
}

func (_c *mockCreateArchiveHandler_HandleArchiveRequest_Call) Run(run func(ctx context.Context, cr *v1.SupportArchive)) *mockCreateArchiveHandler_HandleArchiveRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.SupportArchive))
	})
	return _c
}

func (_c *mockCreateArchiveHandler_HandleArchiveRequest_Call) Return(requeueAfter time.Duration, err error) *mockCreateArchiveHandler_HandleArchiveRequest_Call {
	_c.Call.Return(requeueAfter, err)
	return _c
}

func (_c *mockCreateArchiveHandler_HandleArchiveRequest_Call) RunAndReturn(run func(context.Context, *v1.SupportArchive) (time.Duration, error)) *mockCreateArchiveHandler_HandleArchiveRequest_Call {
	_c.Call.Return(run)
	return _c
}

// newMockCreateArchiveHandler creates a new instance of mockCreateArchiveHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockCreateArchiveHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockCreateArchiveHandler {
	mock := &mockCreateArchiveHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
