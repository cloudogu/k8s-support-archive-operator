// Code generated by mockery v2.53.3. DO NOT EDIT.

package state

import (
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// mockZipCreator is an autogenerated mock type for the zipCreator type
type mockZipCreator struct {
	mock.Mock
}

type mockZipCreator_Expecter struct {
	mock *mock.Mock
}

func (_m *mockZipCreator) EXPECT() *mockZipCreator_Expecter {
	return &mockZipCreator_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: w
func (_m *mockZipCreator) Execute(w io.Writer) Zipper {
	ret := _m.Called(w)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 Zipper
	if rf, ok := ret.Get(0).(func(io.Writer) Zipper); ok {
		r0 = rf(w)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Zipper)
		}
	}

	return r0
}

// mockZipCreator_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type mockZipCreator_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - w io.Writer
func (_e *mockZipCreator_Expecter) Execute(w interface{}) *mockZipCreator_Execute_Call {
	return &mockZipCreator_Execute_Call{Call: _e.mock.On("Execute", w)}
}

func (_c *mockZipCreator_Execute_Call) Run(run func(w io.Writer)) *mockZipCreator_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(io.Writer))
	})
	return _c
}

func (_c *mockZipCreator_Execute_Call) Return(_a0 Zipper) *mockZipCreator_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockZipCreator_Execute_Call) RunAndReturn(run func(io.Writer) Zipper) *mockZipCreator_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// newMockZipCreator creates a new instance of mockZipCreator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockZipCreator(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockZipCreator {
	mock := &mockZipCreator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
