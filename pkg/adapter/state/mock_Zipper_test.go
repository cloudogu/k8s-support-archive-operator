// Code generated by mockery v2.53.3. DO NOT EDIT.

package state

import (
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// MockZipper is an autogenerated mock type for the Zipper type
type MockZipper struct {
	mock.Mock
}

type MockZipper_Expecter struct {
	mock *mock.Mock
}

func (_m *MockZipper) EXPECT() *MockZipper_Expecter {
	return &MockZipper_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *MockZipper) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockZipper_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockZipper_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockZipper_Expecter) Close() *MockZipper_Close_Call {
	return &MockZipper_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockZipper_Close_Call) Run(run func()) *MockZipper_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockZipper_Close_Call) Return(_a0 error) *MockZipper_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockZipper_Close_Call) RunAndReturn(run func() error) *MockZipper_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: name
func (_m *MockZipper) Create(name string) (io.Writer, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 io.Writer
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (io.Writer, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) io.Writer); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Writer)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockZipper_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockZipper_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - name string
func (_e *MockZipper_Expecter) Create(name interface{}) *MockZipper_Create_Call {
	return &MockZipper_Create_Call{Call: _e.mock.On("Create", name)}
}

func (_c *MockZipper_Create_Call) Run(run func(name string)) *MockZipper_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockZipper_Create_Call) Return(_a0 io.Writer, _a1 error) *MockZipper_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockZipper_Create_Call) RunAndReturn(run func(string) (io.Writer, error)) *MockZipper_Create_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockZipper creates a new instance of MockZipper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockZipper(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockZipper {
	mock := &MockZipper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
