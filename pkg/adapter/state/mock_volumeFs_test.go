// Code generated by mockery v2.53.3. DO NOT EDIT.

package state

import (
	fs "io/fs"

	filesystem "github.com/cloudogu/k8s-support-archive-operator/pkg/adapter/filesystem"

	io "io"

	mock "github.com/stretchr/testify/mock"
)

// mockVolumeFs is an autogenerated mock type for the volumeFs type
type mockVolumeFs struct {
	mock.Mock
}

type mockVolumeFs_Expecter struct {
	mock *mock.Mock
}

func (_m *mockVolumeFs) EXPECT() *mockVolumeFs_Expecter {
	return &mockVolumeFs_Expecter{mock: &_m.Mock}
}

// Copy provides a mock function with given fields: dst, src
func (_m *mockVolumeFs) Copy(dst io.Writer, src io.Reader) (int64, error) {
	ret := _m.Called(dst, src)

	if len(ret) == 0 {
		panic("no return value specified for Copy")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(io.Writer, io.Reader) (int64, error)); ok {
		return rf(dst, src)
	}
	if rf, ok := ret.Get(0).(func(io.Writer, io.Reader) int64); ok {
		r0 = rf(dst, src)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(io.Writer, io.Reader) error); ok {
		r1 = rf(dst, src)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockVolumeFs_Copy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Copy'
type mockVolumeFs_Copy_Call struct {
	*mock.Call
}

// Copy is a helper method to define mock.On call
//   - dst io.Writer
//   - src io.Reader
func (_e *mockVolumeFs_Expecter) Copy(dst interface{}, src interface{}) *mockVolumeFs_Copy_Call {
	return &mockVolumeFs_Copy_Call{Call: _e.mock.On("Copy", dst, src)}
}

func (_c *mockVolumeFs_Copy_Call) Run(run func(dst io.Writer, src io.Reader)) *mockVolumeFs_Copy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(io.Writer), args[1].(io.Reader))
	})
	return _c
}

func (_c *mockVolumeFs_Copy_Call) Return(written int64, err error) *mockVolumeFs_Copy_Call {
	_c.Call.Return(written, err)
	return _c
}

func (_c *mockVolumeFs_Copy_Call) RunAndReturn(run func(io.Writer, io.Reader) (int64, error)) *mockVolumeFs_Copy_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: name
func (_m *mockVolumeFs) Create(name string) (filesystem.ClosableRWFile, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 filesystem.ClosableRWFile
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (filesystem.ClosableRWFile, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) filesystem.ClosableRWFile); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(filesystem.ClosableRWFile)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockVolumeFs_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type mockVolumeFs_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - name string
func (_e *mockVolumeFs_Expecter) Create(name interface{}) *mockVolumeFs_Create_Call {
	return &mockVolumeFs_Create_Call{Call: _e.mock.On("Create", name)}
}

func (_c *mockVolumeFs_Create_Call) Run(run func(name string)) *mockVolumeFs_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockVolumeFs_Create_Call) Return(_a0 filesystem.ClosableRWFile, _a1 error) *mockVolumeFs_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockVolumeFs_Create_Call) RunAndReturn(run func(string) (filesystem.ClosableRWFile, error)) *mockVolumeFs_Create_Call {
	_c.Call.Return(run)
	return _c
}

// MkdirAll provides a mock function with given fields: path, perm
func (_m *mockVolumeFs) MkdirAll(path string, perm fs.FileMode) error {
	ret := _m.Called(path, perm)

	if len(ret) == 0 {
		panic("no return value specified for MkdirAll")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, fs.FileMode) error); ok {
		r0 = rf(path, perm)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockVolumeFs_MkdirAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MkdirAll'
type mockVolumeFs_MkdirAll_Call struct {
	*mock.Call
}

// MkdirAll is a helper method to define mock.On call
//   - path string
//   - perm fs.FileMode
func (_e *mockVolumeFs_Expecter) MkdirAll(path interface{}, perm interface{}) *mockVolumeFs_MkdirAll_Call {
	return &mockVolumeFs_MkdirAll_Call{Call: _e.mock.On("MkdirAll", path, perm)}
}

func (_c *mockVolumeFs_MkdirAll_Call) Run(run func(path string, perm fs.FileMode)) *mockVolumeFs_MkdirAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(fs.FileMode))
	})
	return _c
}

func (_c *mockVolumeFs_MkdirAll_Call) Return(_a0 error) *mockVolumeFs_MkdirAll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockVolumeFs_MkdirAll_Call) RunAndReturn(run func(string, fs.FileMode) error) *mockVolumeFs_MkdirAll_Call {
	_c.Call.Return(run)
	return _c
}

// Open provides a mock function with given fields: path
func (_m *mockVolumeFs) Open(path string) (filesystem.ClosableRWFile, error) {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for Open")
	}

	var r0 filesystem.ClosableRWFile
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (filesystem.ClosableRWFile, error)); ok {
		return rf(path)
	}
	if rf, ok := ret.Get(0).(func(string) filesystem.ClosableRWFile); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(filesystem.ClosableRWFile)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockVolumeFs_Open_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Open'
type mockVolumeFs_Open_Call struct {
	*mock.Call
}

// Open is a helper method to define mock.On call
//   - path string
func (_e *mockVolumeFs_Expecter) Open(path interface{}) *mockVolumeFs_Open_Call {
	return &mockVolumeFs_Open_Call{Call: _e.mock.On("Open", path)}
}

func (_c *mockVolumeFs_Open_Call) Run(run func(path string)) *mockVolumeFs_Open_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockVolumeFs_Open_Call) Return(_a0 filesystem.ClosableRWFile, _a1 error) *mockVolumeFs_Open_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockVolumeFs_Open_Call) RunAndReturn(run func(string) (filesystem.ClosableRWFile, error)) *mockVolumeFs_Open_Call {
	_c.Call.Return(run)
	return _c
}

// OpenFile provides a mock function with given fields: path, flag, perm
func (_m *mockVolumeFs) OpenFile(path string, flag int, perm fs.FileMode) (filesystem.ClosableRWFile, error) {
	ret := _m.Called(path, flag, perm)

	if len(ret) == 0 {
		panic("no return value specified for OpenFile")
	}

	var r0 filesystem.ClosableRWFile
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int, fs.FileMode) (filesystem.ClosableRWFile, error)); ok {
		return rf(path, flag, perm)
	}
	if rf, ok := ret.Get(0).(func(string, int, fs.FileMode) filesystem.ClosableRWFile); ok {
		r0 = rf(path, flag, perm)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(filesystem.ClosableRWFile)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, fs.FileMode) error); ok {
		r1 = rf(path, flag, perm)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockVolumeFs_OpenFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OpenFile'
type mockVolumeFs_OpenFile_Call struct {
	*mock.Call
}

// OpenFile is a helper method to define mock.On call
//   - path string
//   - flag int
//   - perm fs.FileMode
func (_e *mockVolumeFs_Expecter) OpenFile(path interface{}, flag interface{}, perm interface{}) *mockVolumeFs_OpenFile_Call {
	return &mockVolumeFs_OpenFile_Call{Call: _e.mock.On("OpenFile", path, flag, perm)}
}

func (_c *mockVolumeFs_OpenFile_Call) Run(run func(path string, flag int, perm fs.FileMode)) *mockVolumeFs_OpenFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int), args[2].(fs.FileMode))
	})
	return _c
}

func (_c *mockVolumeFs_OpenFile_Call) Return(_a0 filesystem.ClosableRWFile, _a1 error) *mockVolumeFs_OpenFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockVolumeFs_OpenFile_Call) RunAndReturn(run func(string, int, fs.FileMode) (filesystem.ClosableRWFile, error)) *mockVolumeFs_OpenFile_Call {
	_c.Call.Return(run)
	return _c
}

// ReadAll provides a mock function with given fields: r
func (_m *mockVolumeFs) ReadAll(r io.Reader) ([]byte, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ReadAll")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(io.Reader) ([]byte, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(io.Reader) []byte); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(io.Reader) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockVolumeFs_ReadAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadAll'
type mockVolumeFs_ReadAll_Call struct {
	*mock.Call
}

// ReadAll is a helper method to define mock.On call
//   - r io.Reader
func (_e *mockVolumeFs_Expecter) ReadAll(r interface{}) *mockVolumeFs_ReadAll_Call {
	return &mockVolumeFs_ReadAll_Call{Call: _e.mock.On("ReadAll", r)}
}

func (_c *mockVolumeFs_ReadAll_Call) Run(run func(r io.Reader)) *mockVolumeFs_ReadAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(io.Reader))
	})
	return _c
}

func (_c *mockVolumeFs_ReadAll_Call) Return(_a0 []byte, _a1 error) *mockVolumeFs_ReadAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockVolumeFs_ReadAll_Call) RunAndReturn(run func(io.Reader) ([]byte, error)) *mockVolumeFs_ReadAll_Call {
	_c.Call.Return(run)
	return _c
}

// ReadDir provides a mock function with given fields: name
func (_m *mockVolumeFs) ReadDir(name string) ([]fs.DirEntry, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for ReadDir")
	}

	var r0 []fs.DirEntry
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]fs.DirEntry, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) []fs.DirEntry); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]fs.DirEntry)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockVolumeFs_ReadDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadDir'
type mockVolumeFs_ReadDir_Call struct {
	*mock.Call
}

// ReadDir is a helper method to define mock.On call
//   - name string
func (_e *mockVolumeFs_Expecter) ReadDir(name interface{}) *mockVolumeFs_ReadDir_Call {
	return &mockVolumeFs_ReadDir_Call{Call: _e.mock.On("ReadDir", name)}
}

func (_c *mockVolumeFs_ReadDir_Call) Run(run func(name string)) *mockVolumeFs_ReadDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockVolumeFs_ReadDir_Call) Return(_a0 []fs.DirEntry, _a1 error) *mockVolumeFs_ReadDir_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockVolumeFs_ReadDir_Call) RunAndReturn(run func(string) ([]fs.DirEntry, error)) *mockVolumeFs_ReadDir_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function with given fields: name
func (_m *mockVolumeFs) Remove(name string) error {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockVolumeFs_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type mockVolumeFs_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - name string
func (_e *mockVolumeFs_Expecter) Remove(name interface{}) *mockVolumeFs_Remove_Call {
	return &mockVolumeFs_Remove_Call{Call: _e.mock.On("Remove", name)}
}

func (_c *mockVolumeFs_Remove_Call) Run(run func(name string)) *mockVolumeFs_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockVolumeFs_Remove_Call) Return(_a0 error) *mockVolumeFs_Remove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockVolumeFs_Remove_Call) RunAndReturn(run func(string) error) *mockVolumeFs_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveAll provides a mock function with given fields: path
func (_m *mockVolumeFs) RemoveAll(path string) error {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for RemoveAll")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockVolumeFs_RemoveAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveAll'
type mockVolumeFs_RemoveAll_Call struct {
	*mock.Call
}

// RemoveAll is a helper method to define mock.On call
//   - path string
func (_e *mockVolumeFs_Expecter) RemoveAll(path interface{}) *mockVolumeFs_RemoveAll_Call {
	return &mockVolumeFs_RemoveAll_Call{Call: _e.mock.On("RemoveAll", path)}
}

func (_c *mockVolumeFs_RemoveAll_Call) Run(run func(path string)) *mockVolumeFs_RemoveAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockVolumeFs_RemoveAll_Call) Return(_a0 error) *mockVolumeFs_RemoveAll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockVolumeFs_RemoveAll_Call) RunAndReturn(run func(string) error) *mockVolumeFs_RemoveAll_Call {
	_c.Call.Return(run)
	return _c
}

// Stat provides a mock function with given fields: name
func (_m *mockVolumeFs) Stat(name string) (fs.FileInfo, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Stat")
	}

	var r0 fs.FileInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (fs.FileInfo, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) fs.FileInfo); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(fs.FileInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockVolumeFs_Stat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stat'
type mockVolumeFs_Stat_Call struct {
	*mock.Call
}

// Stat is a helper method to define mock.On call
//   - name string
func (_e *mockVolumeFs_Expecter) Stat(name interface{}) *mockVolumeFs_Stat_Call {
	return &mockVolumeFs_Stat_Call{Call: _e.mock.On("Stat", name)}
}

func (_c *mockVolumeFs_Stat_Call) Run(run func(name string)) *mockVolumeFs_Stat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockVolumeFs_Stat_Call) Return(_a0 fs.FileInfo, _a1 error) *mockVolumeFs_Stat_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockVolumeFs_Stat_Call) RunAndReturn(run func(string) (fs.FileInfo, error)) *mockVolumeFs_Stat_Call {
	_c.Call.Return(run)
	return _c
}

// WalkDir provides a mock function with given fields: root, fn
func (_m *mockVolumeFs) WalkDir(root string, fn fs.WalkDirFunc) error {
	ret := _m.Called(root, fn)

	if len(ret) == 0 {
		panic("no return value specified for WalkDir")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, fs.WalkDirFunc) error); ok {
		r0 = rf(root, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockVolumeFs_WalkDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WalkDir'
type mockVolumeFs_WalkDir_Call struct {
	*mock.Call
}

// WalkDir is a helper method to define mock.On call
//   - root string
//   - fn fs.WalkDirFunc
func (_e *mockVolumeFs_Expecter) WalkDir(root interface{}, fn interface{}) *mockVolumeFs_WalkDir_Call {
	return &mockVolumeFs_WalkDir_Call{Call: _e.mock.On("WalkDir", root, fn)}
}

func (_c *mockVolumeFs_WalkDir_Call) Run(run func(root string, fn fs.WalkDirFunc)) *mockVolumeFs_WalkDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(fs.WalkDirFunc))
	})
	return _c
}

func (_c *mockVolumeFs_WalkDir_Call) Return(_a0 error) *mockVolumeFs_WalkDir_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockVolumeFs_WalkDir_Call) RunAndReturn(run func(string, fs.WalkDirFunc) error) *mockVolumeFs_WalkDir_Call {
	_c.Call.Return(run)
	return _c
}

// WriteFile provides a mock function with given fields: name, data, perm
func (_m *mockVolumeFs) WriteFile(name string, data []byte, perm fs.FileMode) error {
	ret := _m.Called(name, data, perm)

	if len(ret) == 0 {
		panic("no return value specified for WriteFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte, fs.FileMode) error); ok {
		r0 = rf(name, data, perm)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockVolumeFs_WriteFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteFile'
type mockVolumeFs_WriteFile_Call struct {
	*mock.Call
}

// WriteFile is a helper method to define mock.On call
//   - name string
//   - data []byte
//   - perm fs.FileMode
func (_e *mockVolumeFs_Expecter) WriteFile(name interface{}, data interface{}, perm interface{}) *mockVolumeFs_WriteFile_Call {
	return &mockVolumeFs_WriteFile_Call{Call: _e.mock.On("WriteFile", name, data, perm)}
}

func (_c *mockVolumeFs_WriteFile_Call) Run(run func(name string, data []byte, perm fs.FileMode)) *mockVolumeFs_WriteFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]byte), args[2].(fs.FileMode))
	})
	return _c
}

func (_c *mockVolumeFs_WriteFile_Call) Return(_a0 error) *mockVolumeFs_WriteFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockVolumeFs_WriteFile_Call) RunAndReturn(run func(string, []byte, fs.FileMode) error) *mockVolumeFs_WriteFile_Call {
	_c.Call.Return(run)
	return _c
}

// newMockVolumeFs creates a new instance of mockVolumeFs. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockVolumeFs(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockVolumeFs {
	mock := &mockVolumeFs{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
