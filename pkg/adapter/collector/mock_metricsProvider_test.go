// Code generated by mockery v2.53.5. DO NOT EDIT.

package collector

import (
	context "context"

	domain "github.com/cloudogu/k8s-support-archive-operator/pkg/domain"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// mockMetricsProvider is an autogenerated mock type for the metricsProvider type
type mockMetricsProvider struct {
	mock.Mock
}

type mockMetricsProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *mockMetricsProvider) EXPECT() *mockMetricsProvider_Expecter {
	return &mockMetricsProvider_Expecter{mock: &_m.Mock}
}

// GetCapacityBytesForPVC provides a mock function with given fields: ctx, namespace, pvcName, ts
func (_m *mockMetricsProvider) GetCapacityBytesForPVC(ctx context.Context, namespace string, pvcName string, ts time.Time) (int64, error) {
	ret := _m.Called(ctx, namespace, pvcName, ts)

	if len(ret) == 0 {
		panic("no return value specified for GetCapacityBytesForPVC")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Time) (int64, error)); ok {
		return rf(ctx, namespace, pvcName, ts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Time) int64); ok {
		r0 = rf(ctx, namespace, pvcName, ts)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, time.Time) error); ok {
		r1 = rf(ctx, namespace, pvcName, ts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockMetricsProvider_GetCapacityBytesForPVC_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCapacityBytesForPVC'
type mockMetricsProvider_GetCapacityBytesForPVC_Call struct {
	*mock.Call
}

// GetCapacityBytesForPVC is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - pvcName string
//   - ts time.Time
func (_e *mockMetricsProvider_Expecter) GetCapacityBytesForPVC(ctx interface{}, namespace interface{}, pvcName interface{}, ts interface{}) *mockMetricsProvider_GetCapacityBytesForPVC_Call {
	return &mockMetricsProvider_GetCapacityBytesForPVC_Call{Call: _e.mock.On("GetCapacityBytesForPVC", ctx, namespace, pvcName, ts)}
}

func (_c *mockMetricsProvider_GetCapacityBytesForPVC_Call) Run(run func(ctx context.Context, namespace string, pvcName string, ts time.Time)) *mockMetricsProvider_GetCapacityBytesForPVC_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(time.Time))
	})
	return _c
}

func (_c *mockMetricsProvider_GetCapacityBytesForPVC_Call) Return(_a0 int64, _a1 error) *mockMetricsProvider_GetCapacityBytesForPVC_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockMetricsProvider_GetCapacityBytesForPVC_Call) RunAndReturn(run func(context.Context, string, string, time.Time) (int64, error)) *mockMetricsProvider_GetCapacityBytesForPVC_Call {
	_c.Call.Return(run)
	return _c
}

// GetNodeCPUCores provides a mock function with given fields: ctx, start, end, steps, resultChan
func (_m *mockMetricsProvider) GetNodeCPUCores(ctx context.Context, start time.Time, end time.Time, steps time.Duration, resultChan chan<- *domain.LabeledSample) error {
	ret := _m.Called(ctx, start, end, steps, resultChan)

	if len(ret) == 0 {
		panic("no return value specified for GetNodeCPUCores")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time, time.Duration, chan<- *domain.LabeledSample) error); ok {
		r0 = rf(ctx, start, end, steps, resultChan)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockMetricsProvider_GetNodeCPUCores_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNodeCPUCores'
type mockMetricsProvider_GetNodeCPUCores_Call struct {
	*mock.Call
}

// GetNodeCPUCores is a helper method to define mock.On call
//   - ctx context.Context
//   - start time.Time
//   - end time.Time
//   - steps time.Duration
//   - resultChan chan<- *domain.LabeledSample
func (_e *mockMetricsProvider_Expecter) GetNodeCPUCores(ctx interface{}, start interface{}, end interface{}, steps interface{}, resultChan interface{}) *mockMetricsProvider_GetNodeCPUCores_Call {
	return &mockMetricsProvider_GetNodeCPUCores_Call{Call: _e.mock.On("GetNodeCPUCores", ctx, start, end, steps, resultChan)}
}

func (_c *mockMetricsProvider_GetNodeCPUCores_Call) Run(run func(ctx context.Context, start time.Time, end time.Time, steps time.Duration, resultChan chan<- *domain.LabeledSample)) *mockMetricsProvider_GetNodeCPUCores_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Time), args[2].(time.Time), args[3].(time.Duration), args[4].(chan<- *domain.LabeledSample))
	})
	return _c
}

func (_c *mockMetricsProvider_GetNodeCPUCores_Call) Return(_a0 error) *mockMetricsProvider_GetNodeCPUCores_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockMetricsProvider_GetNodeCPUCores_Call) RunAndReturn(run func(context.Context, time.Time, time.Time, time.Duration, chan<- *domain.LabeledSample) error) *mockMetricsProvider_GetNodeCPUCores_Call {
	_c.Call.Return(run)
	return _c
}

// GetNodeCPUUsage provides a mock function with given fields: ctx, start, end, steps, resultChan
func (_m *mockMetricsProvider) GetNodeCPUUsage(ctx context.Context, start time.Time, end time.Time, steps time.Duration, resultChan chan<- *domain.LabeledSample) error {
	ret := _m.Called(ctx, start, end, steps, resultChan)

	if len(ret) == 0 {
		panic("no return value specified for GetNodeCPUUsage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time, time.Duration, chan<- *domain.LabeledSample) error); ok {
		r0 = rf(ctx, start, end, steps, resultChan)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockMetricsProvider_GetNodeCPUUsage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNodeCPUUsage'
type mockMetricsProvider_GetNodeCPUUsage_Call struct {
	*mock.Call
}

// GetNodeCPUUsage is a helper method to define mock.On call
//   - ctx context.Context
//   - start time.Time
//   - end time.Time
//   - steps time.Duration
//   - resultChan chan<- *domain.LabeledSample
func (_e *mockMetricsProvider_Expecter) GetNodeCPUUsage(ctx interface{}, start interface{}, end interface{}, steps interface{}, resultChan interface{}) *mockMetricsProvider_GetNodeCPUUsage_Call {
	return &mockMetricsProvider_GetNodeCPUUsage_Call{Call: _e.mock.On("GetNodeCPUUsage", ctx, start, end, steps, resultChan)}
}

func (_c *mockMetricsProvider_GetNodeCPUUsage_Call) Run(run func(ctx context.Context, start time.Time, end time.Time, steps time.Duration, resultChan chan<- *domain.LabeledSample)) *mockMetricsProvider_GetNodeCPUUsage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Time), args[2].(time.Time), args[3].(time.Duration), args[4].(chan<- *domain.LabeledSample))
	})
	return _c
}

func (_c *mockMetricsProvider_GetNodeCPUUsage_Call) Return(_a0 error) *mockMetricsProvider_GetNodeCPUUsage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockMetricsProvider_GetNodeCPUUsage_Call) RunAndReturn(run func(context.Context, time.Time, time.Time, time.Duration, chan<- *domain.LabeledSample) error) *mockMetricsProvider_GetNodeCPUUsage_Call {
	_c.Call.Return(run)
	return _c
}

// GetNodeCPUUsageRelative provides a mock function with given fields: ctx, start, end, steps, resultChan
func (_m *mockMetricsProvider) GetNodeCPUUsageRelative(ctx context.Context, start time.Time, end time.Time, steps time.Duration, resultChan chan<- *domain.LabeledSample) error {
	ret := _m.Called(ctx, start, end, steps, resultChan)

	if len(ret) == 0 {
		panic("no return value specified for GetNodeCPUUsageRelative")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time, time.Duration, chan<- *domain.LabeledSample) error); ok {
		r0 = rf(ctx, start, end, steps, resultChan)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockMetricsProvider_GetNodeCPUUsageRelative_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNodeCPUUsageRelative'
type mockMetricsProvider_GetNodeCPUUsageRelative_Call struct {
	*mock.Call
}

// GetNodeCPUUsageRelative is a helper method to define mock.On call
//   - ctx context.Context
//   - start time.Time
//   - end time.Time
//   - steps time.Duration
//   - resultChan chan<- *domain.LabeledSample
func (_e *mockMetricsProvider_Expecter) GetNodeCPUUsageRelative(ctx interface{}, start interface{}, end interface{}, steps interface{}, resultChan interface{}) *mockMetricsProvider_GetNodeCPUUsageRelative_Call {
	return &mockMetricsProvider_GetNodeCPUUsageRelative_Call{Call: _e.mock.On("GetNodeCPUUsageRelative", ctx, start, end, steps, resultChan)}
}

func (_c *mockMetricsProvider_GetNodeCPUUsageRelative_Call) Run(run func(ctx context.Context, start time.Time, end time.Time, steps time.Duration, resultChan chan<- *domain.LabeledSample)) *mockMetricsProvider_GetNodeCPUUsageRelative_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Time), args[2].(time.Time), args[3].(time.Duration), args[4].(chan<- *domain.LabeledSample))
	})
	return _c
}

func (_c *mockMetricsProvider_GetNodeCPUUsageRelative_Call) Return(_a0 error) *mockMetricsProvider_GetNodeCPUUsageRelative_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockMetricsProvider_GetNodeCPUUsageRelative_Call) RunAndReturn(run func(context.Context, time.Time, time.Time, time.Duration, chan<- *domain.LabeledSample) error) *mockMetricsProvider_GetNodeCPUUsageRelative_Call {
	_c.Call.Return(run)
	return _c
}

// GetNodeCount provides a mock function with given fields: ctx, start, end, steps, resultChan
func (_m *mockMetricsProvider) GetNodeCount(ctx context.Context, start time.Time, end time.Time, steps time.Duration, resultChan chan<- *domain.LabeledSample) error {
	ret := _m.Called(ctx, start, end, steps, resultChan)

	if len(ret) == 0 {
		panic("no return value specified for GetNodeCount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time, time.Duration, chan<- *domain.LabeledSample) error); ok {
		r0 = rf(ctx, start, end, steps, resultChan)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockMetricsProvider_GetNodeCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNodeCount'
type mockMetricsProvider_GetNodeCount_Call struct {
	*mock.Call
}

// GetNodeCount is a helper method to define mock.On call
//   - ctx context.Context
//   - start time.Time
//   - end time.Time
//   - steps time.Duration
//   - resultChan chan<- *domain.LabeledSample
func (_e *mockMetricsProvider_Expecter) GetNodeCount(ctx interface{}, start interface{}, end interface{}, steps interface{}, resultChan interface{}) *mockMetricsProvider_GetNodeCount_Call {
	return &mockMetricsProvider_GetNodeCount_Call{Call: _e.mock.On("GetNodeCount", ctx, start, end, steps, resultChan)}
}

func (_c *mockMetricsProvider_GetNodeCount_Call) Run(run func(ctx context.Context, start time.Time, end time.Time, steps time.Duration, resultChan chan<- *domain.LabeledSample)) *mockMetricsProvider_GetNodeCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Time), args[2].(time.Time), args[3].(time.Duration), args[4].(chan<- *domain.LabeledSample))
	})
	return _c
}

func (_c *mockMetricsProvider_GetNodeCount_Call) Return(_a0 error) *mockMetricsProvider_GetNodeCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockMetricsProvider_GetNodeCount_Call) RunAndReturn(run func(context.Context, time.Time, time.Time, time.Duration, chan<- *domain.LabeledSample) error) *mockMetricsProvider_GetNodeCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetNodeNames provides a mock function with given fields: ctx, start, end, steps, resultChan
func (_m *mockMetricsProvider) GetNodeNames(ctx context.Context, start time.Time, end time.Time, steps time.Duration, resultChan chan<- *domain.LabeledSample) error {
	ret := _m.Called(ctx, start, end, steps, resultChan)

	if len(ret) == 0 {
		panic("no return value specified for GetNodeNames")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time, time.Duration, chan<- *domain.LabeledSample) error); ok {
		r0 = rf(ctx, start, end, steps, resultChan)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockMetricsProvider_GetNodeNames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNodeNames'
type mockMetricsProvider_GetNodeNames_Call struct {
	*mock.Call
}

// GetNodeNames is a helper method to define mock.On call
//   - ctx context.Context
//   - start time.Time
//   - end time.Time
//   - steps time.Duration
//   - resultChan chan<- *domain.LabeledSample
func (_e *mockMetricsProvider_Expecter) GetNodeNames(ctx interface{}, start interface{}, end interface{}, steps interface{}, resultChan interface{}) *mockMetricsProvider_GetNodeNames_Call {
	return &mockMetricsProvider_GetNodeNames_Call{Call: _e.mock.On("GetNodeNames", ctx, start, end, steps, resultChan)}
}

func (_c *mockMetricsProvider_GetNodeNames_Call) Run(run func(ctx context.Context, start time.Time, end time.Time, steps time.Duration, resultChan chan<- *domain.LabeledSample)) *mockMetricsProvider_GetNodeNames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Time), args[2].(time.Time), args[3].(time.Duration), args[4].(chan<- *domain.LabeledSample))
	})
	return _c
}

func (_c *mockMetricsProvider_GetNodeNames_Call) Return(_a0 error) *mockMetricsProvider_GetNodeNames_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockMetricsProvider_GetNodeNames_Call) RunAndReturn(run func(context.Context, time.Time, time.Time, time.Duration, chan<- *domain.LabeledSample) error) *mockMetricsProvider_GetNodeNames_Call {
	_c.Call.Return(run)
	return _c
}

// GetNodeNetworkContainerBytesReceived provides a mock function with given fields: ctx, start, end, steps, resultChan
func (_m *mockMetricsProvider) GetNodeNetworkContainerBytesReceived(ctx context.Context, start time.Time, end time.Time, steps time.Duration, resultChan chan<- *domain.LabeledSample) error {
	ret := _m.Called(ctx, start, end, steps, resultChan)

	if len(ret) == 0 {
		panic("no return value specified for GetNodeNetworkContainerBytesReceived")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time, time.Duration, chan<- *domain.LabeledSample) error); ok {
		r0 = rf(ctx, start, end, steps, resultChan)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockMetricsProvider_GetNodeNetworkContainerBytesReceived_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNodeNetworkContainerBytesReceived'
type mockMetricsProvider_GetNodeNetworkContainerBytesReceived_Call struct {
	*mock.Call
}

// GetNodeNetworkContainerBytesReceived is a helper method to define mock.On call
//   - ctx context.Context
//   - start time.Time
//   - end time.Time
//   - steps time.Duration
//   - resultChan chan<- *domain.LabeledSample
func (_e *mockMetricsProvider_Expecter) GetNodeNetworkContainerBytesReceived(ctx interface{}, start interface{}, end interface{}, steps interface{}, resultChan interface{}) *mockMetricsProvider_GetNodeNetworkContainerBytesReceived_Call {
	return &mockMetricsProvider_GetNodeNetworkContainerBytesReceived_Call{Call: _e.mock.On("GetNodeNetworkContainerBytesReceived", ctx, start, end, steps, resultChan)}
}

func (_c *mockMetricsProvider_GetNodeNetworkContainerBytesReceived_Call) Run(run func(ctx context.Context, start time.Time, end time.Time, steps time.Duration, resultChan chan<- *domain.LabeledSample)) *mockMetricsProvider_GetNodeNetworkContainerBytesReceived_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Time), args[2].(time.Time), args[3].(time.Duration), args[4].(chan<- *domain.LabeledSample))
	})
	return _c
}

func (_c *mockMetricsProvider_GetNodeNetworkContainerBytesReceived_Call) Return(_a0 error) *mockMetricsProvider_GetNodeNetworkContainerBytesReceived_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockMetricsProvider_GetNodeNetworkContainerBytesReceived_Call) RunAndReturn(run func(context.Context, time.Time, time.Time, time.Duration, chan<- *domain.LabeledSample) error) *mockMetricsProvider_GetNodeNetworkContainerBytesReceived_Call {
	_c.Call.Return(run)
	return _c
}

// GetNodeNetworkContainerBytesSend provides a mock function with given fields: ctx, start, end, steps, resultChan
func (_m *mockMetricsProvider) GetNodeNetworkContainerBytesSend(ctx context.Context, start time.Time, end time.Time, steps time.Duration, resultChan chan<- *domain.LabeledSample) error {
	ret := _m.Called(ctx, start, end, steps, resultChan)

	if len(ret) == 0 {
		panic("no return value specified for GetNodeNetworkContainerBytesSend")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time, time.Duration, chan<- *domain.LabeledSample) error); ok {
		r0 = rf(ctx, start, end, steps, resultChan)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockMetricsProvider_GetNodeNetworkContainerBytesSend_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNodeNetworkContainerBytesSend'
type mockMetricsProvider_GetNodeNetworkContainerBytesSend_Call struct {
	*mock.Call
}

// GetNodeNetworkContainerBytesSend is a helper method to define mock.On call
//   - ctx context.Context
//   - start time.Time
//   - end time.Time
//   - steps time.Duration
//   - resultChan chan<- *domain.LabeledSample
func (_e *mockMetricsProvider_Expecter) GetNodeNetworkContainerBytesSend(ctx interface{}, start interface{}, end interface{}, steps interface{}, resultChan interface{}) *mockMetricsProvider_GetNodeNetworkContainerBytesSend_Call {
	return &mockMetricsProvider_GetNodeNetworkContainerBytesSend_Call{Call: _e.mock.On("GetNodeNetworkContainerBytesSend", ctx, start, end, steps, resultChan)}
}

func (_c *mockMetricsProvider_GetNodeNetworkContainerBytesSend_Call) Run(run func(ctx context.Context, start time.Time, end time.Time, steps time.Duration, resultChan chan<- *domain.LabeledSample)) *mockMetricsProvider_GetNodeNetworkContainerBytesSend_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Time), args[2].(time.Time), args[3].(time.Duration), args[4].(chan<- *domain.LabeledSample))
	})
	return _c
}

func (_c *mockMetricsProvider_GetNodeNetworkContainerBytesSend_Call) Return(_a0 error) *mockMetricsProvider_GetNodeNetworkContainerBytesSend_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockMetricsProvider_GetNodeNetworkContainerBytesSend_Call) RunAndReturn(run func(context.Context, time.Time, time.Time, time.Duration, chan<- *domain.LabeledSample) error) *mockMetricsProvider_GetNodeNetworkContainerBytesSend_Call {
	_c.Call.Return(run)
	return _c
}

// GetNodeRAM provides a mock function with given fields: ctx, start, end, steps, resultChan
func (_m *mockMetricsProvider) GetNodeRAM(ctx context.Context, start time.Time, end time.Time, steps time.Duration, resultChan chan<- *domain.LabeledSample) error {
	ret := _m.Called(ctx, start, end, steps, resultChan)

	if len(ret) == 0 {
		panic("no return value specified for GetNodeRAM")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time, time.Duration, chan<- *domain.LabeledSample) error); ok {
		r0 = rf(ctx, start, end, steps, resultChan)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockMetricsProvider_GetNodeRAM_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNodeRAM'
type mockMetricsProvider_GetNodeRAM_Call struct {
	*mock.Call
}

// GetNodeRAM is a helper method to define mock.On call
//   - ctx context.Context
//   - start time.Time
//   - end time.Time
//   - steps time.Duration
//   - resultChan chan<- *domain.LabeledSample
func (_e *mockMetricsProvider_Expecter) GetNodeRAM(ctx interface{}, start interface{}, end interface{}, steps interface{}, resultChan interface{}) *mockMetricsProvider_GetNodeRAM_Call {
	return &mockMetricsProvider_GetNodeRAM_Call{Call: _e.mock.On("GetNodeRAM", ctx, start, end, steps, resultChan)}
}

func (_c *mockMetricsProvider_GetNodeRAM_Call) Run(run func(ctx context.Context, start time.Time, end time.Time, steps time.Duration, resultChan chan<- *domain.LabeledSample)) *mockMetricsProvider_GetNodeRAM_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Time), args[2].(time.Time), args[3].(time.Duration), args[4].(chan<- *domain.LabeledSample))
	})
	return _c
}

func (_c *mockMetricsProvider_GetNodeRAM_Call) Return(_a0 error) *mockMetricsProvider_GetNodeRAM_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockMetricsProvider_GetNodeRAM_Call) RunAndReturn(run func(context.Context, time.Time, time.Time, time.Duration, chan<- *domain.LabeledSample) error) *mockMetricsProvider_GetNodeRAM_Call {
	_c.Call.Return(run)
	return _c
}

// GetNodeRAMFree provides a mock function with given fields: ctx, start, end, steps, resultChan
func (_m *mockMetricsProvider) GetNodeRAMFree(ctx context.Context, start time.Time, end time.Time, steps time.Duration, resultChan chan<- *domain.LabeledSample) error {
	ret := _m.Called(ctx, start, end, steps, resultChan)

	if len(ret) == 0 {
		panic("no return value specified for GetNodeRAMFree")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time, time.Duration, chan<- *domain.LabeledSample) error); ok {
		r0 = rf(ctx, start, end, steps, resultChan)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockMetricsProvider_GetNodeRAMFree_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNodeRAMFree'
type mockMetricsProvider_GetNodeRAMFree_Call struct {
	*mock.Call
}

// GetNodeRAMFree is a helper method to define mock.On call
//   - ctx context.Context
//   - start time.Time
//   - end time.Time
//   - steps time.Duration
//   - resultChan chan<- *domain.LabeledSample
func (_e *mockMetricsProvider_Expecter) GetNodeRAMFree(ctx interface{}, start interface{}, end interface{}, steps interface{}, resultChan interface{}) *mockMetricsProvider_GetNodeRAMFree_Call {
	return &mockMetricsProvider_GetNodeRAMFree_Call{Call: _e.mock.On("GetNodeRAMFree", ctx, start, end, steps, resultChan)}
}

func (_c *mockMetricsProvider_GetNodeRAMFree_Call) Run(run func(ctx context.Context, start time.Time, end time.Time, steps time.Duration, resultChan chan<- *domain.LabeledSample)) *mockMetricsProvider_GetNodeRAMFree_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Time), args[2].(time.Time), args[3].(time.Duration), args[4].(chan<- *domain.LabeledSample))
	})
	return _c
}

func (_c *mockMetricsProvider_GetNodeRAMFree_Call) Return(_a0 error) *mockMetricsProvider_GetNodeRAMFree_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockMetricsProvider_GetNodeRAMFree_Call) RunAndReturn(run func(context.Context, time.Time, time.Time, time.Duration, chan<- *domain.LabeledSample) error) *mockMetricsProvider_GetNodeRAMFree_Call {
	_c.Call.Return(run)
	return _c
}

// GetNodeRAMUsedRelative provides a mock function with given fields: ctx, start, end, steps, resultChan
func (_m *mockMetricsProvider) GetNodeRAMUsedRelative(ctx context.Context, start time.Time, end time.Time, steps time.Duration, resultChan chan<- *domain.LabeledSample) error {
	ret := _m.Called(ctx, start, end, steps, resultChan)

	if len(ret) == 0 {
		panic("no return value specified for GetNodeRAMUsedRelative")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time, time.Duration, chan<- *domain.LabeledSample) error); ok {
		r0 = rf(ctx, start, end, steps, resultChan)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockMetricsProvider_GetNodeRAMUsedRelative_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNodeRAMUsedRelative'
type mockMetricsProvider_GetNodeRAMUsedRelative_Call struct {
	*mock.Call
}

// GetNodeRAMUsedRelative is a helper method to define mock.On call
//   - ctx context.Context
//   - start time.Time
//   - end time.Time
//   - steps time.Duration
//   - resultChan chan<- *domain.LabeledSample
func (_e *mockMetricsProvider_Expecter) GetNodeRAMUsedRelative(ctx interface{}, start interface{}, end interface{}, steps interface{}, resultChan interface{}) *mockMetricsProvider_GetNodeRAMUsedRelative_Call {
	return &mockMetricsProvider_GetNodeRAMUsedRelative_Call{Call: _e.mock.On("GetNodeRAMUsedRelative", ctx, start, end, steps, resultChan)}
}

func (_c *mockMetricsProvider_GetNodeRAMUsedRelative_Call) Run(run func(ctx context.Context, start time.Time, end time.Time, steps time.Duration, resultChan chan<- *domain.LabeledSample)) *mockMetricsProvider_GetNodeRAMUsedRelative_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Time), args[2].(time.Time), args[3].(time.Duration), args[4].(chan<- *domain.LabeledSample))
	})
	return _c
}

func (_c *mockMetricsProvider_GetNodeRAMUsedRelative_Call) Return(_a0 error) *mockMetricsProvider_GetNodeRAMUsedRelative_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockMetricsProvider_GetNodeRAMUsedRelative_Call) RunAndReturn(run func(context.Context, time.Time, time.Time, time.Duration, chan<- *domain.LabeledSample) error) *mockMetricsProvider_GetNodeRAMUsedRelative_Call {
	_c.Call.Return(run)
	return _c
}

// GetNodeStorage provides a mock function with given fields: ctx, start, end, steps, resultChan
func (_m *mockMetricsProvider) GetNodeStorage(ctx context.Context, start time.Time, end time.Time, steps time.Duration, resultChan chan<- *domain.LabeledSample) error {
	ret := _m.Called(ctx, start, end, steps, resultChan)

	if len(ret) == 0 {
		panic("no return value specified for GetNodeStorage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time, time.Duration, chan<- *domain.LabeledSample) error); ok {
		r0 = rf(ctx, start, end, steps, resultChan)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockMetricsProvider_GetNodeStorage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNodeStorage'
type mockMetricsProvider_GetNodeStorage_Call struct {
	*mock.Call
}

// GetNodeStorage is a helper method to define mock.On call
//   - ctx context.Context
//   - start time.Time
//   - end time.Time
//   - steps time.Duration
//   - resultChan chan<- *domain.LabeledSample
func (_e *mockMetricsProvider_Expecter) GetNodeStorage(ctx interface{}, start interface{}, end interface{}, steps interface{}, resultChan interface{}) *mockMetricsProvider_GetNodeStorage_Call {
	return &mockMetricsProvider_GetNodeStorage_Call{Call: _e.mock.On("GetNodeStorage", ctx, start, end, steps, resultChan)}
}

func (_c *mockMetricsProvider_GetNodeStorage_Call) Run(run func(ctx context.Context, start time.Time, end time.Time, steps time.Duration, resultChan chan<- *domain.LabeledSample)) *mockMetricsProvider_GetNodeStorage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Time), args[2].(time.Time), args[3].(time.Duration), args[4].(chan<- *domain.LabeledSample))
	})
	return _c
}

func (_c *mockMetricsProvider_GetNodeStorage_Call) Return(_a0 error) *mockMetricsProvider_GetNodeStorage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockMetricsProvider_GetNodeStorage_Call) RunAndReturn(run func(context.Context, time.Time, time.Time, time.Duration, chan<- *domain.LabeledSample) error) *mockMetricsProvider_GetNodeStorage_Call {
	_c.Call.Return(run)
	return _c
}

// GetNodeStorageFree provides a mock function with given fields: ctx, start, end, steps, resultChan
func (_m *mockMetricsProvider) GetNodeStorageFree(ctx context.Context, start time.Time, end time.Time, steps time.Duration, resultChan chan<- *domain.LabeledSample) error {
	ret := _m.Called(ctx, start, end, steps, resultChan)

	if len(ret) == 0 {
		panic("no return value specified for GetNodeStorageFree")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time, time.Duration, chan<- *domain.LabeledSample) error); ok {
		r0 = rf(ctx, start, end, steps, resultChan)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockMetricsProvider_GetNodeStorageFree_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNodeStorageFree'
type mockMetricsProvider_GetNodeStorageFree_Call struct {
	*mock.Call
}

// GetNodeStorageFree is a helper method to define mock.On call
//   - ctx context.Context
//   - start time.Time
//   - end time.Time
//   - steps time.Duration
//   - resultChan chan<- *domain.LabeledSample
func (_e *mockMetricsProvider_Expecter) GetNodeStorageFree(ctx interface{}, start interface{}, end interface{}, steps interface{}, resultChan interface{}) *mockMetricsProvider_GetNodeStorageFree_Call {
	return &mockMetricsProvider_GetNodeStorageFree_Call{Call: _e.mock.On("GetNodeStorageFree", ctx, start, end, steps, resultChan)}
}

func (_c *mockMetricsProvider_GetNodeStorageFree_Call) Run(run func(ctx context.Context, start time.Time, end time.Time, steps time.Duration, resultChan chan<- *domain.LabeledSample)) *mockMetricsProvider_GetNodeStorageFree_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Time), args[2].(time.Time), args[3].(time.Duration), args[4].(chan<- *domain.LabeledSample))
	})
	return _c
}

func (_c *mockMetricsProvider_GetNodeStorageFree_Call) Return(_a0 error) *mockMetricsProvider_GetNodeStorageFree_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockMetricsProvider_GetNodeStorageFree_Call) RunAndReturn(run func(context.Context, time.Time, time.Time, time.Duration, chan<- *domain.LabeledSample) error) *mockMetricsProvider_GetNodeStorageFree_Call {
	_c.Call.Return(run)
	return _c
}

// GetNodeStorageFreeRelative provides a mock function with given fields: ctx, start, end, steps, resultChan
func (_m *mockMetricsProvider) GetNodeStorageFreeRelative(ctx context.Context, start time.Time, end time.Time, steps time.Duration, resultChan chan<- *domain.LabeledSample) error {
	ret := _m.Called(ctx, start, end, steps, resultChan)

	if len(ret) == 0 {
		panic("no return value specified for GetNodeStorageFreeRelative")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time, time.Duration, chan<- *domain.LabeledSample) error); ok {
		r0 = rf(ctx, start, end, steps, resultChan)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockMetricsProvider_GetNodeStorageFreeRelative_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNodeStorageFreeRelative'
type mockMetricsProvider_GetNodeStorageFreeRelative_Call struct {
	*mock.Call
}

// GetNodeStorageFreeRelative is a helper method to define mock.On call
//   - ctx context.Context
//   - start time.Time
//   - end time.Time
//   - steps time.Duration
//   - resultChan chan<- *domain.LabeledSample
func (_e *mockMetricsProvider_Expecter) GetNodeStorageFreeRelative(ctx interface{}, start interface{}, end interface{}, steps interface{}, resultChan interface{}) *mockMetricsProvider_GetNodeStorageFreeRelative_Call {
	return &mockMetricsProvider_GetNodeStorageFreeRelative_Call{Call: _e.mock.On("GetNodeStorageFreeRelative", ctx, start, end, steps, resultChan)}
}

func (_c *mockMetricsProvider_GetNodeStorageFreeRelative_Call) Run(run func(ctx context.Context, start time.Time, end time.Time, steps time.Duration, resultChan chan<- *domain.LabeledSample)) *mockMetricsProvider_GetNodeStorageFreeRelative_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Time), args[2].(time.Time), args[3].(time.Duration), args[4].(chan<- *domain.LabeledSample))
	})
	return _c
}

func (_c *mockMetricsProvider_GetNodeStorageFreeRelative_Call) Return(_a0 error) *mockMetricsProvider_GetNodeStorageFreeRelative_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockMetricsProvider_GetNodeStorageFreeRelative_Call) RunAndReturn(run func(context.Context, time.Time, time.Time, time.Duration, chan<- *domain.LabeledSample) error) *mockMetricsProvider_GetNodeStorageFreeRelative_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsedBytesForPVC provides a mock function with given fields: ctx, namespace, pvcName, ts
func (_m *mockMetricsProvider) GetUsedBytesForPVC(ctx context.Context, namespace string, pvcName string, ts time.Time) (int64, error) {
	ret := _m.Called(ctx, namespace, pvcName, ts)

	if len(ret) == 0 {
		panic("no return value specified for GetUsedBytesForPVC")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Time) (int64, error)); ok {
		return rf(ctx, namespace, pvcName, ts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Time) int64); ok {
		r0 = rf(ctx, namespace, pvcName, ts)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, time.Time) error); ok {
		r1 = rf(ctx, namespace, pvcName, ts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockMetricsProvider_GetUsedBytesForPVC_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsedBytesForPVC'
type mockMetricsProvider_GetUsedBytesForPVC_Call struct {
	*mock.Call
}

// GetUsedBytesForPVC is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - pvcName string
//   - ts time.Time
func (_e *mockMetricsProvider_Expecter) GetUsedBytesForPVC(ctx interface{}, namespace interface{}, pvcName interface{}, ts interface{}) *mockMetricsProvider_GetUsedBytesForPVC_Call {
	return &mockMetricsProvider_GetUsedBytesForPVC_Call{Call: _e.mock.On("GetUsedBytesForPVC", ctx, namespace, pvcName, ts)}
}

func (_c *mockMetricsProvider_GetUsedBytesForPVC_Call) Run(run func(ctx context.Context, namespace string, pvcName string, ts time.Time)) *mockMetricsProvider_GetUsedBytesForPVC_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(time.Time))
	})
	return _c
}

func (_c *mockMetricsProvider_GetUsedBytesForPVC_Call) Return(_a0 int64, _a1 error) *mockMetricsProvider_GetUsedBytesForPVC_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockMetricsProvider_GetUsedBytesForPVC_Call) RunAndReturn(run func(context.Context, string, string, time.Time) (int64, error)) *mockMetricsProvider_GetUsedBytesForPVC_Call {
	_c.Call.Return(run)
	return _c
}

// newMockMetricsProvider creates a new instance of mockMetricsProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockMetricsProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockMetricsProvider {
	mock := &mockMetricsProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
