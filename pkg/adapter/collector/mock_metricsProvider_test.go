// Code generated by mockery v2.53.3. DO NOT EDIT.

package collector

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// mockMetricsProvider is an autogenerated mock type for the metricsProvider type
type mockMetricsProvider struct {
	mock.Mock
}

type mockMetricsProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *mockMetricsProvider) EXPECT() *mockMetricsProvider_Expecter {
	return &mockMetricsProvider_Expecter{mock: &_m.Mock}
}

// GetCapacityBytesForPVC provides a mock function with given fields: ctx, namespace, pvcName, ts
func (_m *mockMetricsProvider) GetCapacityBytesForPVC(ctx context.Context, namespace string, pvcName string, ts time.Time) (int64, error) {
	ret := _m.Called(ctx, namespace, pvcName, ts)

	if len(ret) == 0 {
		panic("no return value specified for GetCapacityBytesForPVC")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Time) (int64, error)); ok {
		return rf(ctx, namespace, pvcName, ts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Time) int64); ok {
		r0 = rf(ctx, namespace, pvcName, ts)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, time.Time) error); ok {
		r1 = rf(ctx, namespace, pvcName, ts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockMetricsProvider_GetCapacityBytesForPVC_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCapacityBytesForPVC'
type mockMetricsProvider_GetCapacityBytesForPVC_Call struct {
	*mock.Call
}

// GetCapacityBytesForPVC is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - pvcName string
//   - ts time.Time
func (_e *mockMetricsProvider_Expecter) GetCapacityBytesForPVC(ctx interface{}, namespace interface{}, pvcName interface{}, ts interface{}) *mockMetricsProvider_GetCapacityBytesForPVC_Call {
	return &mockMetricsProvider_GetCapacityBytesForPVC_Call{Call: _e.mock.On("GetCapacityBytesForPVC", ctx, namespace, pvcName, ts)}
}

func (_c *mockMetricsProvider_GetCapacityBytesForPVC_Call) Run(run func(ctx context.Context, namespace string, pvcName string, ts time.Time)) *mockMetricsProvider_GetCapacityBytesForPVC_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(time.Time))
	})
	return _c
}

func (_c *mockMetricsProvider_GetCapacityBytesForPVC_Call) Return(_a0 int64, _a1 error) *mockMetricsProvider_GetCapacityBytesForPVC_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockMetricsProvider_GetCapacityBytesForPVC_Call) RunAndReturn(run func(context.Context, string, string, time.Time) (int64, error)) *mockMetricsProvider_GetCapacityBytesForPVC_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsedBytesForPVC provides a mock function with given fields: ctx, namespace, pvcName, ts
func (_m *mockMetricsProvider) GetUsedBytesForPVC(ctx context.Context, namespace string, pvcName string, ts time.Time) (int64, error) {
	ret := _m.Called(ctx, namespace, pvcName, ts)

	if len(ret) == 0 {
		panic("no return value specified for GetUsedBytesForPVC")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Time) (int64, error)); ok {
		return rf(ctx, namespace, pvcName, ts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Time) int64); ok {
		r0 = rf(ctx, namespace, pvcName, ts)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, time.Time) error); ok {
		r1 = rf(ctx, namespace, pvcName, ts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockMetricsProvider_GetUsedBytesForPVC_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsedBytesForPVC'
type mockMetricsProvider_GetUsedBytesForPVC_Call struct {
	*mock.Call
}

// GetUsedBytesForPVC is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - pvcName string
//   - ts time.Time
func (_e *mockMetricsProvider_Expecter) GetUsedBytesForPVC(ctx interface{}, namespace interface{}, pvcName interface{}, ts interface{}) *mockMetricsProvider_GetUsedBytesForPVC_Call {
	return &mockMetricsProvider_GetUsedBytesForPVC_Call{Call: _e.mock.On("GetUsedBytesForPVC", ctx, namespace, pvcName, ts)}
}

func (_c *mockMetricsProvider_GetUsedBytesForPVC_Call) Run(run func(ctx context.Context, namespace string, pvcName string, ts time.Time)) *mockMetricsProvider_GetUsedBytesForPVC_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(time.Time))
	})
	return _c
}

func (_c *mockMetricsProvider_GetUsedBytesForPVC_Call) Return(_a0 int64, _a1 error) *mockMetricsProvider_GetUsedBytesForPVC_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockMetricsProvider_GetUsedBytesForPVC_Call) RunAndReturn(run func(context.Context, string, string, time.Time) (int64, error)) *mockMetricsProvider_GetUsedBytesForPVC_Call {
	_c.Call.Return(run)
	return _c
}

// newMockMetricsProvider creates a new instance of mockMetricsProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockMetricsProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockMetricsProvider {
	mock := &mockMetricsProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
