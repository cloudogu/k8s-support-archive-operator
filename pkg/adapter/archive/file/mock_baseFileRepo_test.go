// Code generated by mockery v2.53.3. DO NOT EDIT.

package file

import (
	context "context"

	domain "github.com/cloudogu/k8s-support-archive-operator/pkg/domain"
	mock "github.com/stretchr/testify/mock"
)

// mockBaseFileRepo is an autogenerated mock type for the baseFileRepo type
type mockBaseFileRepo struct {
	mock.Mock
}

type mockBaseFileRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *mockBaseFileRepo) EXPECT() *mockBaseFileRepo_Expecter {
	return &mockBaseFileRepo_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, id, collectorDir
func (_m *mockBaseFileRepo) Delete(ctx context.Context, id domain.SupportArchiveID, collectorDir string) error {
	ret := _m.Called(ctx, id, collectorDir)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.SupportArchiveID, string) error); ok {
		r0 = rf(ctx, id, collectorDir)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockBaseFileRepo_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type mockBaseFileRepo_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.SupportArchiveID
//   - collectorDir string
func (_e *mockBaseFileRepo_Expecter) Delete(ctx interface{}, id interface{}, collectorDir interface{}) *mockBaseFileRepo_Delete_Call {
	return &mockBaseFileRepo_Delete_Call{Call: _e.mock.On("Delete", ctx, id, collectorDir)}
}

func (_c *mockBaseFileRepo_Delete_Call) Run(run func(ctx context.Context, id domain.SupportArchiveID, collectorDir string)) *mockBaseFileRepo_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.SupportArchiveID), args[2].(string))
	})
	return _c
}

func (_c *mockBaseFileRepo_Delete_Call) Return(_a0 error) *mockBaseFileRepo_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockBaseFileRepo_Delete_Call) RunAndReturn(run func(context.Context, domain.SupportArchiveID, string) error) *mockBaseFileRepo_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// FinishCollection provides a mock function with given fields: ctx, id, collectorDir
func (_m *mockBaseFileRepo) FinishCollection(ctx context.Context, id domain.SupportArchiveID, collectorDir string) error {
	ret := _m.Called(ctx, id, collectorDir)

	if len(ret) == 0 {
		panic("no return value specified for FinishCollection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.SupportArchiveID, string) error); ok {
		r0 = rf(ctx, id, collectorDir)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockBaseFileRepo_FinishCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FinishCollection'
type mockBaseFileRepo_FinishCollection_Call struct {
	*mock.Call
}

// FinishCollection is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.SupportArchiveID
//   - collectorDir string
func (_e *mockBaseFileRepo_Expecter) FinishCollection(ctx interface{}, id interface{}, collectorDir interface{}) *mockBaseFileRepo_FinishCollection_Call {
	return &mockBaseFileRepo_FinishCollection_Call{Call: _e.mock.On("FinishCollection", ctx, id, collectorDir)}
}

func (_c *mockBaseFileRepo_FinishCollection_Call) Run(run func(ctx context.Context, id domain.SupportArchiveID, collectorDir string)) *mockBaseFileRepo_FinishCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.SupportArchiveID), args[2].(string))
	})
	return _c
}

func (_c *mockBaseFileRepo_FinishCollection_Call) Return(_a0 error) *mockBaseFileRepo_FinishCollection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockBaseFileRepo_FinishCollection_Call) RunAndReturn(run func(context.Context, domain.SupportArchiveID, string) error) *mockBaseFileRepo_FinishCollection_Call {
	_c.Call.Return(run)
	return _c
}

// IsCollected provides a mock function with given fields: ctx, id, collectorDir
func (_m *mockBaseFileRepo) IsCollected(ctx context.Context, id domain.SupportArchiveID, collectorDir string) (bool, error) {
	ret := _m.Called(ctx, id, collectorDir)

	if len(ret) == 0 {
		panic("no return value specified for IsCollected")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.SupportArchiveID, string) (bool, error)); ok {
		return rf(ctx, id, collectorDir)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.SupportArchiveID, string) bool); ok {
		r0 = rf(ctx, id, collectorDir)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.SupportArchiveID, string) error); ok {
		r1 = rf(ctx, id, collectorDir)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockBaseFileRepo_IsCollected_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsCollected'
type mockBaseFileRepo_IsCollected_Call struct {
	*mock.Call
}

// IsCollected is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.SupportArchiveID
//   - collectorDir string
func (_e *mockBaseFileRepo_Expecter) IsCollected(ctx interface{}, id interface{}, collectorDir interface{}) *mockBaseFileRepo_IsCollected_Call {
	return &mockBaseFileRepo_IsCollected_Call{Call: _e.mock.On("IsCollected", ctx, id, collectorDir)}
}

func (_c *mockBaseFileRepo_IsCollected_Call) Run(run func(ctx context.Context, id domain.SupportArchiveID, collectorDir string)) *mockBaseFileRepo_IsCollected_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.SupportArchiveID), args[2].(string))
	})
	return _c
}

func (_c *mockBaseFileRepo_IsCollected_Call) Return(_a0 bool, _a1 error) *mockBaseFileRepo_IsCollected_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockBaseFileRepo_IsCollected_Call) RunAndReturn(run func(context.Context, domain.SupportArchiveID, string) (bool, error)) *mockBaseFileRepo_IsCollected_Call {
	_c.Call.Return(run)
	return _c
}

// stream provides a mock function with given fields: ctx, id, directory, stream
func (_m *mockBaseFileRepo) stream(ctx context.Context, id domain.SupportArchiveID, directory string, stream *domain.Stream) (func() error, error) {
	ret := _m.Called(ctx, id, directory, stream)

	if len(ret) == 0 {
		panic("no return value specified for stream")
	}

	var r0 func() error
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.SupportArchiveID, string, *domain.Stream) (func() error, error)); ok {
		return rf(ctx, id, directory, stream)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.SupportArchiveID, string, *domain.Stream) func() error); ok {
		r0 = rf(ctx, id, directory, stream)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func() error)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.SupportArchiveID, string, *domain.Stream) error); ok {
		r1 = rf(ctx, id, directory, stream)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockBaseFileRepo_stream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'stream'
type mockBaseFileRepo_stream_Call struct {
	*mock.Call
}

// stream is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.SupportArchiveID
//   - directory string
//   - stream *domain.Stream
func (_e *mockBaseFileRepo_Expecter) stream(ctx interface{}, id interface{}, directory interface{}, stream interface{}) *mockBaseFileRepo_stream_Call {
	return &mockBaseFileRepo_stream_Call{Call: _e.mock.On("stream", ctx, id, directory, stream)}
}

func (_c *mockBaseFileRepo_stream_Call) Run(run func(ctx context.Context, id domain.SupportArchiveID, directory string, stream *domain.Stream)) *mockBaseFileRepo_stream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.SupportArchiveID), args[2].(string), args[3].(*domain.Stream))
	})
	return _c
}

func (_c *mockBaseFileRepo_stream_Call) Return(_a0 func() error, _a1 error) *mockBaseFileRepo_stream_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockBaseFileRepo_stream_Call) RunAndReturn(run func(context.Context, domain.SupportArchiveID, string, *domain.Stream) (func() error, error)) *mockBaseFileRepo_stream_Call {
	_c.Call.Return(run)
	return _c
}

// newMockBaseFileRepo creates a new instance of mockBaseFileRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockBaseFileRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockBaseFileRepo {
	mock := &mockBaseFileRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
