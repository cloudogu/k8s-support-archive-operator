// Code generated by mockery v2.53.3. DO NOT EDIT.

package zip

import (
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// MockZipCreator is an autogenerated mock type for the ZipCreator type
type MockZipCreator struct {
	mock.Mock
}

type MockZipCreator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockZipCreator) EXPECT() *MockZipCreator_Expecter {
	return &MockZipCreator_Expecter{mock: &_m.Mock}
}

// NewWriter provides a mock function with given fields: w
func (_m *MockZipCreator) NewWriter(w io.Writer) Zipper {
	ret := _m.Called(w)

	if len(ret) == 0 {
		panic("no return value specified for NewWriter")
	}

	var r0 Zipper
	if rf, ok := ret.Get(0).(func(io.Writer) Zipper); ok {
		r0 = rf(w)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Zipper)
		}
	}

	return r0
}

// MockZipCreator_NewWriter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewWriter'
type MockZipCreator_NewWriter_Call struct {
	*mock.Call
}

// NewWriter is a helper method to define mock.On call
//   - w io.Writer
func (_e *MockZipCreator_Expecter) NewWriter(w interface{}) *MockZipCreator_NewWriter_Call {
	return &MockZipCreator_NewWriter_Call{Call: _e.mock.On("NewWriter", w)}
}

func (_c *MockZipCreator_NewWriter_Call) Run(run func(w io.Writer)) *MockZipCreator_NewWriter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(io.Writer))
	})
	return _c
}

func (_c *MockZipCreator_NewWriter_Call) Return(_a0 Zipper) *MockZipCreator_NewWriter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockZipCreator_NewWriter_Call) RunAndReturn(run func(io.Writer) Zipper) *MockZipCreator_NewWriter_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockZipCreator creates a new instance of MockZipCreator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockZipCreator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockZipCreator {
	mock := &MockZipCreator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
