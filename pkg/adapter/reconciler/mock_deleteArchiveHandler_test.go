// Code generated by mockery v2.53.3. DO NOT EDIT.

package reconciler

import (
	context "context"

	v1 "github.com/cloudogu/k8s-support-archive-lib/api/v1"
	mock "github.com/stretchr/testify/mock"
)

// mockDeleteArchiveHandler is an autogenerated mock type for the deleteArchiveHandler type
type mockDeleteArchiveHandler struct {
	mock.Mock
}

type mockDeleteArchiveHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *mockDeleteArchiveHandler) EXPECT() *mockDeleteArchiveHandler_Expecter {
	return &mockDeleteArchiveHandler_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, cr
func (_m *mockDeleteArchiveHandler) Delete(ctx context.Context, cr *v1.SupportArchive) error {
	ret := _m.Called(ctx, cr)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.SupportArchive) error); ok {
		r0 = rf(ctx, cr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDeleteArchiveHandler_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type mockDeleteArchiveHandler_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - cr *v1.SupportArchive
func (_e *mockDeleteArchiveHandler_Expecter) Delete(ctx interface{}, cr interface{}) *mockDeleteArchiveHandler_Delete_Call {
	return &mockDeleteArchiveHandler_Delete_Call{Call: _e.mock.On("Delete", ctx, cr)}
}

func (_c *mockDeleteArchiveHandler_Delete_Call) Run(run func(ctx context.Context, cr *v1.SupportArchive)) *mockDeleteArchiveHandler_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.SupportArchive))
	})
	return _c
}

func (_c *mockDeleteArchiveHandler_Delete_Call) Return(_a0 error) *mockDeleteArchiveHandler_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDeleteArchiveHandler_Delete_Call) RunAndReturn(run func(context.Context, *v1.SupportArchive) error) *mockDeleteArchiveHandler_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// newMockDeleteArchiveHandler creates a new instance of mockDeleteArchiveHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockDeleteArchiveHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockDeleteArchiveHandler {
	mock := &mockDeleteArchiveHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
