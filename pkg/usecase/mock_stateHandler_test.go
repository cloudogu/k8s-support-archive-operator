// Code generated by mockery v2.53.3. DO NOT EDIT.

package usecase

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// mockStateHandler is an autogenerated mock type for the stateHandler type
type mockStateHandler struct {
	mock.Mock
}

type mockStateHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *mockStateHandler) EXPECT() *mockStateHandler_Expecter {
	return &mockStateHandler_Expecter{mock: &_m.Mock}
}

// GetDownloadURL provides a mock function with given fields: ctx, name, namespace
func (_m *mockStateHandler) GetDownloadURL(ctx context.Context, name string, namespace string) string {
	ret := _m.Called(ctx, name, namespace)

	if len(ret) == 0 {
		panic("no return value specified for GetDownloadURL")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, name, namespace)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// mockStateHandler_GetDownloadURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDownloadURL'
type mockStateHandler_GetDownloadURL_Call struct {
	*mock.Call
}

// GetDownloadURL is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - namespace string
func (_e *mockStateHandler_Expecter) GetDownloadURL(ctx interface{}, name interface{}, namespace interface{}) *mockStateHandler_GetDownloadURL_Call {
	return &mockStateHandler_GetDownloadURL_Call{Call: _e.mock.On("GetDownloadURL", ctx, name, namespace)}
}

func (_c *mockStateHandler_GetDownloadURL_Call) Run(run func(ctx context.Context, name string, namespace string)) *mockStateHandler_GetDownloadURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *mockStateHandler_GetDownloadURL_Call) Return(_a0 string) *mockStateHandler_GetDownloadURL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockStateHandler_GetDownloadURL_Call) RunAndReturn(run func(context.Context, string, string) string) *mockStateHandler_GetDownloadURL_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: ctx, name, namespace
func (_m *mockStateHandler) Read(ctx context.Context, name string, namespace string) ([]string, error) {
	ret := _m.Called(ctx, name, namespace)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]string, error)); ok {
		return rf(ctx, name, namespace)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []string); ok {
		r0 = rf(ctx, name, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, name, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockStateHandler_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type mockStateHandler_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - namespace string
func (_e *mockStateHandler_Expecter) Read(ctx interface{}, name interface{}, namespace interface{}) *mockStateHandler_Read_Call {
	return &mockStateHandler_Read_Call{Call: _e.mock.On("Read", ctx, name, namespace)}
}

func (_c *mockStateHandler_Read_Call) Run(run func(ctx context.Context, name string, namespace string)) *mockStateHandler_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *mockStateHandler_Read_Call) Return(_a0 []string, _a1 error) *mockStateHandler_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockStateHandler_Read_Call) RunAndReturn(run func(context.Context, string, string) ([]string, error)) *mockStateHandler_Read_Call {
	_c.Call.Return(run)
	return _c
}

// Write provides a mock function with given fields: ctx, collectorName, name, namespace, path, writer
func (_m *mockStateHandler) Write(ctx context.Context, collectorName string, name string, namespace string, path string, writer func(io.Writer) error) error {
	ret := _m.Called(ctx, collectorName, name, namespace, path, writer)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, func(io.Writer) error) error); ok {
		r0 = rf(ctx, collectorName, name, namespace, path, writer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockStateHandler_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type mockStateHandler_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - ctx context.Context
//   - collectorName string
//   - name string
//   - namespace string
//   - path string
//   - writer func(io.Writer) error
func (_e *mockStateHandler_Expecter) Write(ctx interface{}, collectorName interface{}, name interface{}, namespace interface{}, path interface{}, writer interface{}) *mockStateHandler_Write_Call {
	return &mockStateHandler_Write_Call{Call: _e.mock.On("Write", ctx, collectorName, name, namespace, path, writer)}
}

func (_c *mockStateHandler_Write_Call) Run(run func(ctx context.Context, collectorName string, name string, namespace string, path string, writer func(io.Writer) error)) *mockStateHandler_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(func(io.Writer) error))
	})
	return _c
}

func (_c *mockStateHandler_Write_Call) Return(_a0 error) *mockStateHandler_Write_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockStateHandler_Write_Call) RunAndReturn(run func(context.Context, string, string, string, string, func(io.Writer) error) error) *mockStateHandler_Write_Call {
	_c.Call.Return(run)
	return _c
}

// newMockStateHandler creates a new instance of mockStateHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockStateHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockStateHandler {
	mock := &mockStateHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
