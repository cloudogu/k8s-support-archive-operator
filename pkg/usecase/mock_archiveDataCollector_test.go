// Code generated by mockery v2.53.3. DO NOT EDIT.

package usecase

import (
	context "context"

	collector "github.com/cloudogu/k8s-support-archive-operator/pkg/collector"

	mock "github.com/stretchr/testify/mock"
)

// mockArchiveDataCollector is an autogenerated mock type for the archiveDataCollector type
type mockArchiveDataCollector struct {
	mock.Mock
}

type mockArchiveDataCollector_Expecter struct {
	mock *mock.Mock
}

func (_m *mockArchiveDataCollector) EXPECT() *mockArchiveDataCollector_Expecter {
	return &mockArchiveDataCollector_Expecter{mock: &_m.Mock}
}

// Collect provides a mock function with given fields: ctx, name, namespace, stateWriter
func (_m *mockArchiveDataCollector) Collect(ctx context.Context, name string, namespace string, stateWriter collector.StateWriter) error {
	ret := _m.Called(ctx, name, namespace, stateWriter)

	if len(ret) == 0 {
		panic("no return value specified for Collect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, collector.StateWriter) error); ok {
		r0 = rf(ctx, name, namespace, stateWriter)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockArchiveDataCollector_Collect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Collect'
type mockArchiveDataCollector_Collect_Call struct {
	*mock.Call
}

// Collect is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - namespace string
//   - stateWriter collector.StateWriter
func (_e *mockArchiveDataCollector_Expecter) Collect(ctx interface{}, name interface{}, namespace interface{}, stateWriter interface{}) *mockArchiveDataCollector_Collect_Call {
	return &mockArchiveDataCollector_Collect_Call{Call: _e.mock.On("Collect", ctx, name, namespace, stateWriter)}
}

func (_c *mockArchiveDataCollector_Collect_Call) Run(run func(ctx context.Context, name string, namespace string, stateWriter collector.StateWriter)) *mockArchiveDataCollector_Collect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(collector.StateWriter))
	})
	return _c
}

func (_c *mockArchiveDataCollector_Collect_Call) Return(_a0 error) *mockArchiveDataCollector_Collect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockArchiveDataCollector_Collect_Call) RunAndReturn(run func(context.Context, string, string, collector.StateWriter) error) *mockArchiveDataCollector_Collect_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with no fields
func (_m *mockArchiveDataCollector) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// mockArchiveDataCollector_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type mockArchiveDataCollector_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *mockArchiveDataCollector_Expecter) Name() *mockArchiveDataCollector_Name_Call {
	return &mockArchiveDataCollector_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *mockArchiveDataCollector_Name_Call) Run(run func()) *mockArchiveDataCollector_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockArchiveDataCollector_Name_Call) Return(_a0 string) *mockArchiveDataCollector_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockArchiveDataCollector_Name_Call) RunAndReturn(run func() string) *mockArchiveDataCollector_Name_Call {
	_c.Call.Return(run)
	return _c
}

// newMockArchiveDataCollector creates a new instance of mockArchiveDataCollector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockArchiveDataCollector(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockArchiveDataCollector {
	mock := &mockArchiveDataCollector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
