// Code generated by mockery v2.53.3. DO NOT EDIT.

package usecase

import (
	context "context"

	domain "github.com/cloudogu/k8s-support-archive-operator/pkg/domain"
	mock "github.com/stretchr/testify/mock"
)

// mockCollectorRepository is an autogenerated mock type for the collectorRepository type
type mockCollectorRepository[DATATYPE domain.CollectorUnionDataType] struct {
	mock.Mock
}

type mockCollectorRepository_Expecter[DATATYPE domain.CollectorUnionDataType] struct {
	mock *mock.Mock
}

func (_m *mockCollectorRepository[DATATYPE]) EXPECT() *mockCollectorRepository_Expecter[DATATYPE] {
	return &mockCollectorRepository_Expecter[DATATYPE]{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, id, data
func (_m *mockCollectorRepository[DATATYPE]) Create(ctx context.Context, id domain.SupportArchiveID, data <-chan *DATATYPE) error {
	ret := _m.Called(ctx, id, data)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.SupportArchiveID, <-chan *DATATYPE) error); ok {
		r0 = rf(ctx, id, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockCollectorRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type mockCollectorRepository_Create_Call[DATATYPE domain.CollectorUnionDataType] struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.SupportArchiveID
//   - data <-chan *DATATYPE
func (_e *mockCollectorRepository_Expecter[DATATYPE]) Create(ctx interface{}, id interface{}, data interface{}) *mockCollectorRepository_Create_Call[DATATYPE] {
	return &mockCollectorRepository_Create_Call[DATATYPE]{Call: _e.mock.On("Create", ctx, id, data)}
}

func (_c *mockCollectorRepository_Create_Call[DATATYPE]) Run(run func(ctx context.Context, id domain.SupportArchiveID, data <-chan *DATATYPE)) *mockCollectorRepository_Create_Call[DATATYPE] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.SupportArchiveID), args[2].(<-chan *DATATYPE))
	})
	return _c
}

func (_c *mockCollectorRepository_Create_Call[DATATYPE]) Return(_a0 error) *mockCollectorRepository_Create_Call[DATATYPE] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockCollectorRepository_Create_Call[DATATYPE]) RunAndReturn(run func(context.Context, domain.SupportArchiveID, <-chan *DATATYPE) error) *mockCollectorRepository_Create_Call[DATATYPE] {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *mockCollectorRepository[DATATYPE]) Delete(ctx context.Context, id domain.SupportArchiveID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.SupportArchiveID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockCollectorRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type mockCollectorRepository_Delete_Call[DATATYPE domain.CollectorUnionDataType] struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.SupportArchiveID
func (_e *mockCollectorRepository_Expecter[DATATYPE]) Delete(ctx interface{}, id interface{}) *mockCollectorRepository_Delete_Call[DATATYPE] {
	return &mockCollectorRepository_Delete_Call[DATATYPE]{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *mockCollectorRepository_Delete_Call[DATATYPE]) Run(run func(ctx context.Context, id domain.SupportArchiveID)) *mockCollectorRepository_Delete_Call[DATATYPE] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.SupportArchiveID))
	})
	return _c
}

func (_c *mockCollectorRepository_Delete_Call[DATATYPE]) Return(_a0 error) *mockCollectorRepository_Delete_Call[DATATYPE] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockCollectorRepository_Delete_Call[DATATYPE]) RunAndReturn(run func(context.Context, domain.SupportArchiveID) error) *mockCollectorRepository_Delete_Call[DATATYPE] {
	_c.Call.Return(run)
	return _c
}

// FinishCollection provides a mock function with given fields: ctx, id
func (_m *mockCollectorRepository[DATATYPE]) FinishCollection(ctx context.Context, id domain.SupportArchiveID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FinishCollection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.SupportArchiveID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockCollectorRepository_FinishCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FinishCollection'
type mockCollectorRepository_FinishCollection_Call[DATATYPE domain.CollectorUnionDataType] struct {
	*mock.Call
}

// FinishCollection is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.SupportArchiveID
func (_e *mockCollectorRepository_Expecter[DATATYPE]) FinishCollection(ctx interface{}, id interface{}) *mockCollectorRepository_FinishCollection_Call[DATATYPE] {
	return &mockCollectorRepository_FinishCollection_Call[DATATYPE]{Call: _e.mock.On("FinishCollection", ctx, id)}
}

func (_c *mockCollectorRepository_FinishCollection_Call[DATATYPE]) Run(run func(ctx context.Context, id domain.SupportArchiveID)) *mockCollectorRepository_FinishCollection_Call[DATATYPE] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.SupportArchiveID))
	})
	return _c
}

func (_c *mockCollectorRepository_FinishCollection_Call[DATATYPE]) Return(_a0 error) *mockCollectorRepository_FinishCollection_Call[DATATYPE] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockCollectorRepository_FinishCollection_Call[DATATYPE]) RunAndReturn(run func(context.Context, domain.SupportArchiveID) error) *mockCollectorRepository_FinishCollection_Call[DATATYPE] {
	_c.Call.Return(run)
	return _c
}

// IsCollected provides a mock function with given fields: ctx, id
func (_m *mockCollectorRepository[DATATYPE]) IsCollected(ctx context.Context, id domain.SupportArchiveID) (bool, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for IsCollected")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.SupportArchiveID) (bool, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.SupportArchiveID) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.SupportArchiveID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockCollectorRepository_IsCollected_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsCollected'
type mockCollectorRepository_IsCollected_Call[DATATYPE domain.CollectorUnionDataType] struct {
	*mock.Call
}

// IsCollected is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.SupportArchiveID
func (_e *mockCollectorRepository_Expecter[DATATYPE]) IsCollected(ctx interface{}, id interface{}) *mockCollectorRepository_IsCollected_Call[DATATYPE] {
	return &mockCollectorRepository_IsCollected_Call[DATATYPE]{Call: _e.mock.On("IsCollected", ctx, id)}
}

func (_c *mockCollectorRepository_IsCollected_Call[DATATYPE]) Run(run func(ctx context.Context, id domain.SupportArchiveID)) *mockCollectorRepository_IsCollected_Call[DATATYPE] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.SupportArchiveID))
	})
	return _c
}

func (_c *mockCollectorRepository_IsCollected_Call[DATATYPE]) Return(_a0 bool, _a1 error) *mockCollectorRepository_IsCollected_Call[DATATYPE] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockCollectorRepository_IsCollected_Call[DATATYPE]) RunAndReturn(run func(context.Context, domain.SupportArchiveID) (bool, error)) *mockCollectorRepository_IsCollected_Call[DATATYPE] {
	_c.Call.Return(run)
	return _c
}

// Stream provides a mock function with given fields: ctx, id, stream
func (_m *mockCollectorRepository[DATATYPE]) Stream(ctx context.Context, id domain.SupportArchiveID, stream domain.Stream) (func() error, error) {
	ret := _m.Called(ctx, id, stream)

	if len(ret) == 0 {
		panic("no return value specified for Stream")
	}

	var r0 func() error
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.SupportArchiveID, domain.Stream) (func() error, error)); ok {
		return rf(ctx, id, stream)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.SupportArchiveID, domain.Stream) func() error); ok {
		r0 = rf(ctx, id, stream)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func() error)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.SupportArchiveID, domain.Stream) error); ok {
		r1 = rf(ctx, id, stream)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockCollectorRepository_Stream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stream'
type mockCollectorRepository_Stream_Call[DATATYPE domain.CollectorUnionDataType] struct {
	*mock.Call
}

// Stream is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.SupportArchiveID
//   - stream domain.Stream
func (_e *mockCollectorRepository_Expecter[DATATYPE]) Stream(ctx interface{}, id interface{}, stream interface{}) *mockCollectorRepository_Stream_Call[DATATYPE] {
	return &mockCollectorRepository_Stream_Call[DATATYPE]{Call: _e.mock.On("Stream", ctx, id, stream)}
}

func (_c *mockCollectorRepository_Stream_Call[DATATYPE]) Run(run func(ctx context.Context, id domain.SupportArchiveID, stream domain.Stream)) *mockCollectorRepository_Stream_Call[DATATYPE] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.SupportArchiveID), args[2].(domain.Stream))
	})
	return _c
}

func (_c *mockCollectorRepository_Stream_Call[DATATYPE]) Return(_a0 func() error, _a1 error) *mockCollectorRepository_Stream_Call[DATATYPE] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockCollectorRepository_Stream_Call[DATATYPE]) RunAndReturn(run func(context.Context, domain.SupportArchiveID, domain.Stream) (func() error, error)) *mockCollectorRepository_Stream_Call[DATATYPE] {
	_c.Call.Return(run)
	return _c
}

// newMockCollectorRepository creates a new instance of mockCollectorRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockCollectorRepository[DATATYPE domain.CollectorUnionDataType](t interface {
	mock.TestingT
	Cleanup(func())
}) *mockCollectorRepository[DATATYPE] {
	mock := &mockCollectorRepository[DATATYPE]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
