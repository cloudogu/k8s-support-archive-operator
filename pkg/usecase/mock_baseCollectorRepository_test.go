// Code generated by mockery v2.53.5. DO NOT EDIT.

package usecase

import (
	context "context"

	domain "github.com/cloudogu/k8s-support-archive-operator/pkg/domain"
	mock "github.com/stretchr/testify/mock"
)

// mockBaseCollectorRepository is an autogenerated mock type for the baseCollectorRepository type
type mockBaseCollectorRepository struct {
	mock.Mock
}

type mockBaseCollectorRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *mockBaseCollectorRepository) EXPECT() *mockBaseCollectorRepository_Expecter {
	return &mockBaseCollectorRepository_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, id
func (_m *mockBaseCollectorRepository) Delete(ctx context.Context, id domain.SupportArchiveID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.SupportArchiveID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockBaseCollectorRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type mockBaseCollectorRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.SupportArchiveID
func (_e *mockBaseCollectorRepository_Expecter) Delete(ctx interface{}, id interface{}) *mockBaseCollectorRepository_Delete_Call {
	return &mockBaseCollectorRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *mockBaseCollectorRepository_Delete_Call) Run(run func(ctx context.Context, id domain.SupportArchiveID)) *mockBaseCollectorRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.SupportArchiveID))
	})
	return _c
}

func (_c *mockBaseCollectorRepository_Delete_Call) Return(_a0 error) *mockBaseCollectorRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockBaseCollectorRepository_Delete_Call) RunAndReturn(run func(context.Context, domain.SupportArchiveID) error) *mockBaseCollectorRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// IsCollected provides a mock function with given fields: ctx, id
func (_m *mockBaseCollectorRepository) IsCollected(ctx context.Context, id domain.SupportArchiveID) (bool, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for IsCollected")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.SupportArchiveID) (bool, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.SupportArchiveID) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.SupportArchiveID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockBaseCollectorRepository_IsCollected_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsCollected'
type mockBaseCollectorRepository_IsCollected_Call struct {
	*mock.Call
}

// IsCollected is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.SupportArchiveID
func (_e *mockBaseCollectorRepository_Expecter) IsCollected(ctx interface{}, id interface{}) *mockBaseCollectorRepository_IsCollected_Call {
	return &mockBaseCollectorRepository_IsCollected_Call{Call: _e.mock.On("IsCollected", ctx, id)}
}

func (_c *mockBaseCollectorRepository_IsCollected_Call) Run(run func(ctx context.Context, id domain.SupportArchiveID)) *mockBaseCollectorRepository_IsCollected_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.SupportArchiveID))
	})
	return _c
}

func (_c *mockBaseCollectorRepository_IsCollected_Call) Return(_a0 bool, _a1 error) *mockBaseCollectorRepository_IsCollected_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockBaseCollectorRepository_IsCollected_Call) RunAndReturn(run func(context.Context, domain.SupportArchiveID) (bool, error)) *mockBaseCollectorRepository_IsCollected_Call {
	_c.Call.Return(run)
	return _c
}

// Stream provides a mock function with given fields: ctx, id, stream
func (_m *mockBaseCollectorRepository) Stream(ctx context.Context, id domain.SupportArchiveID, stream *domain.Stream) error {
	ret := _m.Called(ctx, id, stream)

	if len(ret) == 0 {
		panic("no return value specified for Stream")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.SupportArchiveID, *domain.Stream) error); ok {
		r0 = rf(ctx, id, stream)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockBaseCollectorRepository_Stream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stream'
type mockBaseCollectorRepository_Stream_Call struct {
	*mock.Call
}

// Stream is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.SupportArchiveID
//   - stream *domain.Stream
func (_e *mockBaseCollectorRepository_Expecter) Stream(ctx interface{}, id interface{}, stream interface{}) *mockBaseCollectorRepository_Stream_Call {
	return &mockBaseCollectorRepository_Stream_Call{Call: _e.mock.On("Stream", ctx, id, stream)}
}

func (_c *mockBaseCollectorRepository_Stream_Call) Run(run func(ctx context.Context, id domain.SupportArchiveID, stream *domain.Stream)) *mockBaseCollectorRepository_Stream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.SupportArchiveID), args[2].(*domain.Stream))
	})
	return _c
}

func (_c *mockBaseCollectorRepository_Stream_Call) Return(_a0 error) *mockBaseCollectorRepository_Stream_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockBaseCollectorRepository_Stream_Call) RunAndReturn(run func(context.Context, domain.SupportArchiveID, *domain.Stream) error) *mockBaseCollectorRepository_Stream_Call {
	_c.Call.Return(run)
	return _c
}

// newMockBaseCollectorRepository creates a new instance of mockBaseCollectorRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockBaseCollectorRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockBaseCollectorRepository {
	mock := &mockBaseCollectorRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
