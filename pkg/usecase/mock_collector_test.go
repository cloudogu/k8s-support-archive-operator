// Code generated by mockery v2.53.3. DO NOT EDIT.

package usecase

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// mockCollector is an autogenerated mock type for the collector type
type mockCollector[DATATYPE interface{}] struct {
	mock.Mock
}

type mockCollector_Expecter[DATATYPE interface{}] struct {
	mock *mock.Mock
}

func (_m *mockCollector[DATATYPE]) EXPECT() *mockCollector_Expecter[DATATYPE] {
	return &mockCollector_Expecter[DATATYPE]{mock: &_m.Mock}
}

// Collect provides a mock function with given fields: ctx, startTime, endTime, resultChan
func (_m *mockCollector[DATATYPE]) Collect(ctx context.Context, startTime time.Time, endTime time.Time, resultChan chan<- *DATATYPE) error {
	ret := _m.Called(ctx, startTime, endTime, resultChan)

	if len(ret) == 0 {
		panic("no return value specified for Collect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time, chan<- *DATATYPE) error); ok {
		r0 = rf(ctx, startTime, endTime, resultChan)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockCollector_Collect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Collect'
type mockCollector_Collect_Call[DATATYPE interface{}] struct {
	*mock.Call
}

// Collect is a helper method to define mock.On call
//   - ctx context.Context
//   - startTime time.Time
//   - endTime time.Time
//   - resultChan chan<- *DATATYPE
func (_e *mockCollector_Expecter[DATATYPE]) Collect(ctx interface{}, startTime interface{}, endTime interface{}, resultChan interface{}) *mockCollector_Collect_Call[DATATYPE] {
	return &mockCollector_Collect_Call[DATATYPE]{Call: _e.mock.On("Collect", ctx, startTime, endTime, resultChan)}
}

func (_c *mockCollector_Collect_Call[DATATYPE]) Run(run func(ctx context.Context, startTime time.Time, endTime time.Time, resultChan chan<- *DATATYPE)) *mockCollector_Collect_Call[DATATYPE] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Time), args[2].(time.Time), args[3].(chan<- *DATATYPE))
	})
	return _c
}

func (_c *mockCollector_Collect_Call[DATATYPE]) Return(_a0 error) *mockCollector_Collect_Call[DATATYPE] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockCollector_Collect_Call[DATATYPE]) RunAndReturn(run func(context.Context, time.Time, time.Time, chan<- *DATATYPE) error) *mockCollector_Collect_Call[DATATYPE] {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with no fields
func (_m *mockCollector[DATATYPE]) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// mockCollector_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type mockCollector_Name_Call[DATATYPE interface{}] struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *mockCollector_Expecter[DATATYPE]) Name() *mockCollector_Name_Call[DATATYPE] {
	return &mockCollector_Name_Call[DATATYPE]{Call: _e.mock.On("Name")}
}

func (_c *mockCollector_Name_Call[DATATYPE]) Run(run func()) *mockCollector_Name_Call[DATATYPE] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockCollector_Name_Call[DATATYPE]) Return(_a0 string) *mockCollector_Name_Call[DATATYPE] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockCollector_Name_Call[DATATYPE]) RunAndReturn(run func() string) *mockCollector_Name_Call[DATATYPE] {
	_c.Call.Return(run)
	return _c
}

// newMockCollector creates a new instance of mockCollector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockCollector[DATATYPE interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *mockCollector[DATATYPE] {
	mock := &mockCollector[DATATYPE]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
